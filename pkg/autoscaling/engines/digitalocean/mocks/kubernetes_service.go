// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import godo "github.com/digitalocean/godo"
import mock "github.com/stretchr/testify/mock"

// KubernetesService is an autogenerated mock type for the KubernetesService type
type KubernetesService struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *KubernetesService) Create(_a0 context.Context, _a1 *godo.KubernetesClusterCreateRequest) (*godo.KubernetesCluster, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *godo.KubernetesCluster
	if rf, ok := ret.Get(0).(func(context.Context, *godo.KubernetesClusterCreateRequest) *godo.KubernetesCluster); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.KubernetesCluster)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(context.Context, *godo.KubernetesClusterCreateRequest) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *godo.KubernetesClusterCreateRequest) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateNodePool provides a mock function with given fields: ctx, clusterID, req
func (_m *KubernetesService) CreateNodePool(ctx context.Context, clusterID string, req *godo.KubernetesNodePoolCreateRequest) (*godo.KubernetesNodePool, *godo.Response, error) {
	ret := _m.Called(ctx, clusterID, req)

	var r0 *godo.KubernetesNodePool
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.KubernetesNodePoolCreateRequest) *godo.KubernetesNodePool); ok {
		r0 = rf(ctx, clusterID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.KubernetesNodePool)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.KubernetesNodePoolCreateRequest) *godo.Response); ok {
		r1 = rf(ctx, clusterID, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.KubernetesNodePoolCreateRequest) error); ok {
		r2 = rf(ctx, clusterID, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *KubernetesService) Delete(_a0 context.Context, _a1 string) (*godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *godo.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNodePool provides a mock function with given fields: ctx, clusterID, poolID
func (_m *KubernetesService) DeleteNodePool(ctx context.Context, clusterID string, poolID string) (*godo.Response, error) {
	ret := _m.Called(ctx, clusterID, poolID)

	var r0 *godo.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.Response); ok {
		r0 = rf(ctx, clusterID, poolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, clusterID, poolID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *KubernetesService) Get(_a0 context.Context, _a1 string) (*godo.KubernetesCluster, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *godo.KubernetesCluster
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.KubernetesCluster); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.KubernetesCluster)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetKubeConfig provides a mock function with given fields: _a0, _a1
func (_m *KubernetesService) GetKubeConfig(_a0 context.Context, _a1 string) (*godo.KubernetesClusterConfig, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *godo.KubernetesClusterConfig
	if rf, ok := ret.Get(0).(func(context.Context, string) *godo.KubernetesClusterConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.KubernetesClusterConfig)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNodePool provides a mock function with given fields: ctx, clusterID, poolID
func (_m *KubernetesService) GetNodePool(ctx context.Context, clusterID string, poolID string) (*godo.KubernetesNodePool, *godo.Response, error) {
	ret := _m.Called(ctx, clusterID, poolID)

	var r0 *godo.KubernetesNodePool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *godo.KubernetesNodePool); ok {
		r0 = rf(ctx, clusterID, poolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.KubernetesNodePool)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *godo.Response); ok {
		r1 = rf(ctx, clusterID, poolID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, clusterID, poolID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOptions provides a mock function with given fields: _a0
func (_m *KubernetesService) GetOptions(_a0 context.Context) (*godo.KubernetesOptions, *godo.Response, error) {
	ret := _m.Called(_a0)

	var r0 *godo.KubernetesOptions
	if rf, ok := ret.Get(0).(func(context.Context) *godo.KubernetesOptions); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.KubernetesOptions)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(context.Context) *godo.Response); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// List provides a mock function with given fields: _a0, _a1
func (_m *KubernetesService) List(_a0 context.Context, _a1 *godo.ListOptions) ([]*godo.KubernetesCluster, *godo.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*godo.KubernetesCluster
	if rf, ok := ret.Get(0).(func(context.Context, *godo.ListOptions) []*godo.KubernetesCluster); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*godo.KubernetesCluster)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(context.Context, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *godo.ListOptions) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListNodePools provides a mock function with given fields: ctx, clusterID, opts
func (_m *KubernetesService) ListNodePools(ctx context.Context, clusterID string, opts *godo.ListOptions) ([]*godo.KubernetesNodePool, *godo.Response, error) {
	ret := _m.Called(ctx, clusterID, opts)

	var r0 []*godo.KubernetesNodePool
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.ListOptions) []*godo.KubernetesNodePool); ok {
		r0 = rf(ctx, clusterID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*godo.KubernetesNodePool)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.ListOptions) *godo.Response); ok {
		r1 = rf(ctx, clusterID, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.ListOptions) error); ok {
		r2 = rf(ctx, clusterID, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RecycleNodePoolNodes provides a mock function with given fields: ctx, clusterID, poolID, req
func (_m *KubernetesService) RecycleNodePoolNodes(ctx context.Context, clusterID string, poolID string, req *godo.KubernetesNodePoolRecycleNodesRequest) (*godo.Response, error) {
	ret := _m.Called(ctx, clusterID, poolID, req)

	var r0 *godo.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.KubernetesNodePoolRecycleNodesRequest) *godo.Response); ok {
		r0 = rf(ctx, clusterID, poolID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *godo.KubernetesNodePoolRecycleNodesRequest) error); ok {
		r1 = rf(ctx, clusterID, poolID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *KubernetesService) Update(_a0 context.Context, _a1 string, _a2 *godo.KubernetesClusterUpdateRequest) (*godo.KubernetesCluster, *godo.Response, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *godo.KubernetesCluster
	if rf, ok := ret.Get(0).(func(context.Context, string, *godo.KubernetesClusterUpdateRequest) *godo.KubernetesCluster); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.KubernetesCluster)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *godo.KubernetesClusterUpdateRequest) *godo.Response); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *godo.KubernetesClusterUpdateRequest) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateNodePool provides a mock function with given fields: ctx, clusterID, poolID, req
func (_m *KubernetesService) UpdateNodePool(ctx context.Context, clusterID string, poolID string, req *godo.KubernetesNodePoolUpdateRequest) (*godo.KubernetesNodePool, *godo.Response, error) {
	ret := _m.Called(ctx, clusterID, poolID, req)

	var r0 *godo.KubernetesNodePool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *godo.KubernetesNodePoolUpdateRequest) *godo.KubernetesNodePool); ok {
		r0 = rf(ctx, clusterID, poolID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*godo.KubernetesNodePool)
		}
	}

	var r1 *godo.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *godo.KubernetesNodePoolUpdateRequest) *godo.Response); ok {
		r1 = rf(ctx, clusterID, poolID, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*godo.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *godo.KubernetesNodePoolUpdateRequest) error); ok {
		r2 = rf(ctx, clusterID, poolID, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
